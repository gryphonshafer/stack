use Net::IMAP::Simple;

$conf->{postfix} = {
    blacklist  => 'spammers',
    thresholds => {
        single => 6,
        multi  => 6,
    },
    server    => '{{ mailhost }}',
    accounts  => [
        {
            user    => '{{ user }}',
            passwd  => '{{ user_password }}',
            domains => [ '{{ domain }}' ],
        },
    ],
};

push( @{ $conf->{fail2ban} }, {
    name      => 'sasl-fails',
    threshold => 6,
    command   => q{zgrep -E '\[postfix\-sasl\]' /var/log/fail2ban.log /var/log/fail2ban.log.1},
} );

push( @{ $conf->{restart} }, 'courier-imap-ssl' );

push( @{ $conf->{actions} }, sub {
    my $blacklist = $conf->{blacklist_dir} . '/' . $conf->{postfix}{blacklist};
    my @blacklist;
    if ( open( my $blacklist, '<', $blacklist ) ) {
        @blacklist = grep { defined } map { /\b(\d+\.\d+\.\d+\.[\d\/]+)\b/; $1 } <$blacklist>;
    }

    my ( %ips, %rdns );
    my $append_to_blacklist = '';

    for my $account ( @{ $conf->{postfix}{accounts} } ) {
        for my $domain ( @{ $account->{domains} } ) {
            my $user = $account->{user} . '@' . $domain;

            my $imap;
            while ( not $imap ) {
                eval { $imap = Net::IMAP::Simple->new( $conf->{postfix}{server} ) };
                if ($@) {
                    warn $@;
                    sleep 1;
                }
            }
            $imap->login( $user, $account->{passwd} ) or die "Failed to login to IMAP server\n";

            for my $email_id ( 1 .. $imap->select('INBOX.Junk') ) {
                my @headers = $imap->top($email_id);

                my ($spf) = grep { /^Received-SPF:/ } @headers;
                next unless ( $spf and $spf =~ /^Received-SPF: Pass / );
                my ($ip) = $spf =~ /client-ip=([\d\.]+);/;

                $ips{$ip}++;
                $ip =~ s/\.\d+$//;
            }

            $imap->quit;
        }
    }

    my %multi;
    for my $ip ( keys %ips ) {
        ( my $group = $ip ) =~ s/\.\d+$//;
        $multi{$group}{$ip}++;
    }
    my @groups = keys %multi;

    for my $ip (
        map { $_->[0] }
        sort { $b->[1] <=> $a->[1] }
        map { [ $_, $ips{$_} ] }
        grep { defined }
        map {
            my $ip = $_;
            ( not grep { index( $ip, $_ ) == 0 } map { $_ . '.' } @groups ) ? $ip : undef;
        }
        grep { defined }
        map {
            my $ip = $_;
            ( not grep { $ip eq $_ } @whitelist, @blacklist ) ? $ip : undef;
        }
        grep { $ips{$_} >= $conf->{postfix}{thresholds}{single} }
        keys %ips
    ) {
        my $dns = `host $ip`;
        $rdns{$ip} = $1 if ( $dns =~ /domain name pointer (.+?)\.?$/ );

        $append_to_blacklist .= sprintf "DROP net:%-16s all # %4d - %s - %s\n",
            $ip,
            $ips{$ip},
            $time,
            ( $rdns{$ip} || '(no host)' );
    }

    for my $group (
        sort { $b->[1] <=> $a->[1] }
        grep { defined }
        map {
            my $ipg = $_->[0];
            ( not grep { index( $_, $ipg . '.' ) == 0 } @whitelist, @blacklist ) ? $_ : undef;
        }
        grep { $_->[1] >= $conf->{postfix}{thresholds}{multi} }
        map {
            my @ips = keys %{ $multi{$_} };
            [ $_, scalar @ips ];
        }
        keys %multi
    ) {
        $append_to_blacklist .= sprintf "DROP net:%-16s all # %4d - %s\n",
            $group->[0] . '.0/24',
            $group->[1],
            $time;
    }

    open( my $blacklist_w, '>>', $blacklist ) or die $!;
    print $blacklist_w $append_to_blacklist if ($append_to_blacklist);
} );
