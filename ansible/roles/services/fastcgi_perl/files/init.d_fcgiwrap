#!/bin/sh

### BEGIN INIT INFO
# Provides:          fcgiwrap
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: FastCGI wrapper
# Description:       Simple server for running CGI applications over FastCGI
### END INIT INFO

NAME="fcgiwrap"
DESC="FastCGI wrapper"

PIDFILE="/var/run/$NAME.pid"
SPAWN_FCGI="/usr/bin/spawn-fcgi"
DAEMON="/usr/sbin/fcgiwrap"
FCGI_SOCKET="/var/run/fcgiwrap.socket"

DAEMON_OPTS="-f -c 3"
SPAWN_ARGS="-F 1 -s $FCGI_SOCKET -u www-data -U www-data -g www-data -G www-data"

export USER="www-data"
export HOME="/var/www"
export LOGNAME="www-data"
export MAIL="/var/mail/www-data"

if [ -d /opt/perl5 ]
then
    export PERLBREW_ROOT="/opt/perl5"
    export PERLBREW_HOME="${HOME}/.perlbrew"
    . ${PERLBREW_HOME}/init

    __perlbrew_code="$(${PERLBREW_ROOT}/bin/perlbrew env ${PERLBREW_PERL}@${PERLBREW_LIB})"
    eval "$__perlbrew_code"
    unset __perlbrew_code

    export PATH=${PERLBREW_PATH}:$PATH
    export MANPATH=${PERLBREW_MANPATH}:$MANPATH
fi

case "$1" in
    start)
        if [ -f $PIDFILE ]
        then
            echo "$PIDFILE exists, process is already running or crashed"
        else
            echo "Starting $DESC..."

            COMMAND="$SPAWN_FCGI -P /var/run/fcgiwrap.pid $SPAWN_ARGS -- $DAEMON $DAEMON_OPTS"
            eval $(echo $COMMAND) > /dev/null

            if [ $? -gt "0" ]
            then
                echo "$DESC failed to start using command:"
                echo $COMMAND
                exit 1
            fi

            echo "$DESC started"
        fi
        ;;
    systemd)
        echo "Starting $DESC..."

        COMMAND="$SPAWN_FCGI -n $SPAWN_ARGS -- $DAEMON $DAEMON_OPTS"
        eval $(echo $COMMAND) > /dev/null

        if [ $? -gt "0" ]
        then
            echo "$DESC failed to start using command:"
            echo $COMMAND
            exit 1
        fi
        ;;
    stop)
        if [ ! -f $PIDFILE ]
        then
            echo "$PIDFILE does not exist, process is not running"
        else
            echo "Stopping $DESC..."

            PID=$(cat $PIDFILE)
            kill $PID $(pgrep -P $PID)
            unlink $FCGI_SOCKET
            unlink $PIDFILE

            echo "$DESC stopped"
        fi
        ;;
    status)
        PID=0
        if [ -f $PIDFILE ]
        then
            PID=$(cat $PIDFILE)

            if ps -p $PID > /dev/null
            then
                echo "$DESC is running"
                exit 0
            fi
        fi

        echo "$DESC is not running"
        exit 1
        ;;
    restart)
        echo "Restarting $DESC..."
        $0 stop
        $0 start
        ;;
    *)
        INIT_FILE=$(basename $0)
        echo "Usage: $INIT_FILE {start|stop|restart|status}"
        ;;
esac

exit 0
